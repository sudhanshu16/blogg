<?php
/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function blogg_install() {
  // create node types
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or Blog Posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'blog_post',
      'name' => st('Blog post'),
      'base' => 'node_content',
      'description' => st('Use <em>blog post</em> for a blog entries.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      ),
  );
  // add node type
  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }
  // add text formats
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 0,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Set Media markup
  db_update('filter')
    ->fields(array('status' => 1))
    ->condition('format', 'plain_text')
    ->execute();
  db_update('filter')
    ->fields(array('status' => 1))
    ->condition('format', 'filtered_html')
    ->execute();
  db_update('filter')
    ->fields(array('status' => 1))
    ->condition('format', 'full_html')
    ->execute();

  // Configure filtered html wysiwyg
  $filtered_html_wysiwyg = array(
  'default' => 1,
  'user_choose' => 0,
  'show_toggle' => 1,
  'theme' => 'advanced',
  'language' => 'en',
  'buttons' =>
  array (
    'default' =>
      array (
        'Bold' => 1,
        'Italic' => 1,
        'Underline' => 1,
        'Strike' => 1,
        'JustifyLeft' => 1,
        'JustifyCenter' => 1,
        'JustifyRight' => 1,
        'JustifyBlock' => 1,
        'BulletedList' => 1,
        'NumberedList' => 1,
        'Outdent' => 1,
        'Indent' => 1,
        'Undo' => 1,
        'Redo' => 1,
        'Link' => 1,
        'Unlink' => 1,
        'Image' => 1,
        'TextColor' => 1,
        'BGColor' => 1,
        'Superscript' => 1,
        'Subscript' => 1,
        'Blockquote' => 1,
        'Source' => 1,
        'Cut' => 1,
        'Copy' => 1,
        'Paste' => 1,
        'PasteText' => 1,
        'PasteFromWord' => 1,
        'ShowBlocks' => 1,
        'RemoveFormat' => 1,
        'SpecialChar' => 1,
        'Format' => 1,
        'Font' => 1,
        'FontSize' => 1,
        'Styles' => 1,
        'Table' => 1,
        'SelectAll' => 1,
        'Find' => 1,
        'Replace' => 1,
        'CreateDiv' => 1,
        'Iframe' => 1,
        'Maximize' => 1,
        'SpellChecker' => 1,
        'Scayt' => 1,
        'About' => 1,
        'Media' => 1,
      ),
    'drupal' =>
      array (
        'break' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 0,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 0,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
);

// Configure full html wysiwyg
  $full_html_wysiwyg = array(
  'default' => 1,
  'user_choose' => 0,
  'show_toggle' => 1,
  'theme' => 'advanced',
  'language' => 'en',
  'buttons' =>
  array (
    'default' =>
      array (
        'Bold' => 1,
        'Italic' => 1,
        'Underline' => 1,
        'Strike' => 1,
        'JustifyLeft' => 1,
        'JustifyCenter' => 1,
        'JustifyRight' => 1,
        'JustifyBlock' => 1,
        'BulletedList' => 1,
        'NumberedList' => 1,
        'Outdent' => 1,
        'Indent' => 1,
        'Undo' => 1,
        'Redo' => 1,
        'Link' => 1,
        'Unlink' => 1,
        'Image' => 1,
        'TextColor' => 1,
        'BGColor' => 1,
        'Superscript' => 1,
        'Subscript' => 1,
        'Blockquote' => 1,
        'Source' => 1,
        'Cut' => 1,
        'Copy' => 1,
        'Paste' => 1,
        'PasteText' => 1,
        'PasteFromWord' => 1,
        'ShowBlocks' => 1,
        'RemoveFormat' => 1,
        'SpecialChar' => 1,
        'Format' => 1,
        'Font' => 1,
        'FontSize' => 1,
        'Styles' => 1,
        'Table' => 1,
        'SelectAll' => 1,
        'Find' => 1,
        'Replace' => 1,
        'CreateDiv' => 1,
        'Iframe' => 1,
        'Maximize' => 1,
        'SpellChecker' => 1,
        'Scayt' => 1,
        'About' => 1,
        'Media' => 1,
      ),
    'drupal' =>
      array (
        'break' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 0,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 0,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
);

// Configure plain text wysiwyg
  $plain_text_wysiwyg = array(
  'default' => 1,
  'user_choose' => 0,
  'show_toggle' => 1,
  'theme' => 'advanced',
  'language' => 'en',
  'buttons' =>
  array (
    'default' =>
      array (
        'Bold' => 1,
        'Italic' => 1,
        'Underline' => 1,
        'Strike' => 1,
        'JustifyLeft' => 1,
        'JustifyCenter' => 1,
        'JustifyRight' => 1,
        'JustifyBlock' => 1,
        'BulletedList' => 1,
        'NumberedList' => 1,
        'Outdent' => 1,
        'Indent' => 1,
        'Undo' => 1,
        'Redo' => 1,
        'Link' => 1,
        'Unlink' => 1,
        'Image' => 1,
        'TextColor' => 1,
        'BGColor' => 1,
        'Superscript' => 1,
        'Subscript' => 1,
        'Blockquote' => 1,
        'Source' => 1,
        'Cut' => 1,
        'Copy' => 1,
        'Paste' => 1,
        'PasteText' => 1,
        'PasteFromWord' => 1,
        'ShowBlocks' => 1,
        'RemoveFormat' => 1,
        'SpecialChar' => 1,
        'Format' => 1,
        'Font' => 1,
        'FontSize' => 1,
        'Styles' => 1,
        'Table' => 1,
        'SelectAll' => 1,
        'Find' => 1,
        'Replace' => 1,
        'CreateDiv' => 1,
        'Iframe' => 1,
        'Maximize' => 1,
        'SpellChecker' => 1,
        'Scayt' => 1,
        'About' => 1,
        'Media' => 1,
      ),
    'drupal' =>
      array (
        'break' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 0,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 0,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
);

  // Configuring WYSIWYG
  $wysiwyg = array(
    array(
      'format' => 'plain_text',
      'editor' => 'ckeditor',
      'settings' => serialize($plain_text_wysiwyg),
      ),
    array(
      'format' => 'filtered_html',
      'editor' => 'ckeditor',
      'settings' => serialize($filtered_html_wysiwyg),
      ),
    array(
      'format' => 'full_html',
      'editor' => 'ckeditor',
      'settings' => serialize($full_html_wysiwyg),
      ),
  );

  $query = db_insert('wysiwyg')->fields(array('format', 'editor', 'settings'));
    foreach ($wysiwyg as $record) {
    $query->values($record);
    }
    $query->execute();

  // Set permissions for default user types.
  $values = array(
    array(
    'rid' => 1,
    'permission' => 'access content',
    'module' => 'node',
    ),
    array(
    'rid' => 1,
    'permission' => 'vote on polls',
    'module' => 'poll',
    ),
    array(
    'rid' => 1,
    'permission' => 'use search',
    'module' => 'search',
    ),
    array(
    'rid' => 2,
    'permission' => 'access content',
    'module' => 'node',
    ),
    array(
    'rid' => 2,
    'permission' => 'vote on polls',
    'module' => 'poll',
    ),
    array(
    'rid' => 2,
    'permission' => 'edit own blog content',
    'module' => 'blog',
    ),
    array(
    'rid' => 1,
    'permission' => 'use advanced search',
    'module' => 'search',
    ),
    array(
    'rid' => 2,
    'permission' => 'use search',
    'module' => 'search',
    ),
    array(
    'rid' => 2,
    'permission' => 'use advanced search',
    'module' => 'search',
    ),
    array(
    'rid' => 2,
    'permission' => 'create blogpost content',
    'module' => 'blog',
    ),
    array(
    'rid' => 2,
    'permission' => 'view own unpublished content',
    'module' => 'node',
    ),
    );
  $query = db_insert('role_permission')->fields(array('rid', 'permission', 'module'));
    foreach ($values as $record) {
    $query->values($record);
    }
    $query->execute();

  // Setup the metatag module
  $configs = array(
    'global' => array(
      'title' => array('value' => '[current-page:page-title] | [site:name]'),
      'copyright' => array('value' => '[current-date:custom:Y] [site:name]'),
      'canonical' => array('value' => '[current-page:url:absolute]'),
      'shortlink' => array('value' => '[current-page:url:unaliased]'),
      'dcterms.title' => array('value' => '[current-page:title]'),
      'dcterms.type' => array('value' => 'Text'),
      'dcterms.format' => array('value' => 'text/html'),
      'og:site_name' => array('value' => '[current-page:title]'),
      'og:title' => array('value' => '[current-page:title]'),
      'og:type' => array('value' => 'article'),
      'og:url' => array('value' => '[current-page:url:absolute]'),
    ),
    'global:frontpage' => array(
      'title' => array('value' => '[site:name]'),
      'copyright' => array('value' => '[current-date:custom:Y] [site:name]'),
      'canonical' => array('value' => '[current-page:url:absolute]'),
      'shortlink' => array('value' => '[current-page:url:unaliased]'),
      'dcterms.title' => array('value' => '[current-page:title]'),
      'dcterms.type' => array('value' => 'Text'),
      'dcterms.format' => array('value' => 'text/html'),
      'og:site_name' => array('value' => '[current-page:title]'),
      'og:title' => array('value' => '[current-page:title]'),
      'og:type' => array('value' => 'article'),
      'og:url' => array('value' => '[current-page:url:absolute]'),
    ),
  );
  foreach ($configs as $instance => $config) {
    db_insert('metatag_config')
      ->fields(array('instance' => $instance, 'config' => serialize($config)))
      ->execute();
  }
  // disable all themes
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->execute();
  // enable default theme
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'meedjum')
    ->execute();
  // enable admin theme
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('theme_default', 'meedjum');
  // activate admin theme when editing a node
  variable_set('node_admin_theme', '1');
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => meedjum,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => seven,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => seven,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  // drop system / user blocks to ensure correct building
  db_delete('block')->condition('module', 'system')->execute();
  db_delete('block')->condition('module', 'user')->execute();
  // add in our blocks defined above
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 10;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
  // Update the menu router information.
  menu_rebuild();
  // ignore any rebuild messages
  node_access_needs_rebuild(FALSE);
  // ignore any other install messages
  drupal_get_messages();
}
